['scripts', 'IMPA', 'build', 'embeddings', 'experiments', 'dist', 'docs', '.gitignore', 'environment.yml', 'notebooks', 'checkpoints', 'README.md', 'cellprofiler_feature_names', 'tutorial', 'project_folder', '__pycache__', 'setup.py', 'IMPA.egg-info', '__init__.py', '.ipynb_checkpoints', 'config_hydra', '.git']
Number of parameters in generator: 24318595
Number of parameters in style_encoder: 14329472
Number of parameters in discriminator: 14309978
Number of parameters in mapping_network: 66624
Initializing embedding_matrix...
Initializing generator...
Initializing style_encoder...
Initializing discriminator...
Initializing mapping_network...
IMPAmodule(
  (embedding_matrix): Embedding(26, 1024)
  (generator): DataParallel(
    (module): Generator(
      (from_rgb): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (encode): ModuleList(
        (0): ResBlk(
          (actv): LeakyReLU(negative_slope=0.2)
          (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv2): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (norm2): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (conv1x1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ResBlk(
          (actv): LeakyReLU(negative_slope=0.2)
          (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv2): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (norm2): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (conv1x1): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (2): ResBlk(
          (actv): LeakyReLU(negative_slope=0.2)
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv2): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (norm2): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (conv1x1): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (3-4): 2 x ResBlk(
          (actv): LeakyReLU(negative_slope=0.2)
          (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): InstanceNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (norm2): InstanceNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        )
      )
      (decode): ModuleList(
        (0-1): 2 x AdainResBlk(
          (actv): LeakyReLU(negative_slope=0.2)
          (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): AdaIN(
            (norm): InstanceNorm2d(512, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
            (fc): Linear(in_features=64, out_features=1024, bias=True)
          )
          (norm2): AdaIN(
            (norm): InstanceNorm2d(512, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
            (fc): Linear(in_features=64, out_features=1024, bias=True)
          )
        )
        (2): AdainResBlk(
          (actv): LeakyReLU(negative_slope=0.2)
          (conv1): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): AdaIN(
            (norm): InstanceNorm2d(512, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
            (fc): Linear(in_features=64, out_features=1024, bias=True)
          )
          (norm2): AdaIN(
            (norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
            (fc): Linear(in_features=64, out_features=512, bias=True)
          )
          (conv1x1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (3): AdainResBlk(
          (actv): LeakyReLU(negative_slope=0.2)
          (conv1): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): AdaIN(
            (norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
            (fc): Linear(in_features=64, out_features=512, bias=True)
          )
          (norm2): AdaIN(
            (norm): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
            (fc): Linear(in_features=64, out_features=256, bias=True)
          )
          (conv1x1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (4): AdainResBlk(
          (actv): LeakyReLU(negative_slope=0.2)
          (conv1): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): AdaIN(
            (norm): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
            (fc): Linear(in_features=64, out_features=256, bias=True)
          )
          (norm2): AdaIN(
            (norm): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
            (fc): Linear(in_features=64, out_features=128, bias=True)
          )
          (conv1x1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
      (to_rgb): Sequential(
        (0): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (1): LeakyReLU(negative_slope=0.2)
        (2): Conv2d(64, 3, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (style_encoder): DataParallel(
    (module): StyleEncoder(
      (conv): Sequential(
        (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ResBlk(
          (actv): LeakyReLU(negative_slope=0.2)
          (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv2): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv1x1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (2): ResBlk(
          (actv): LeakyReLU(negative_slope=0.2)
          (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv2): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv1x1): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (3): ResBlk(
          (actv): LeakyReLU(negative_slope=0.2)
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv2): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv1x1): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (4): ResBlk(
          (actv): LeakyReLU(negative_slope=0.2)
          (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (5): ResBlk(
          (actv): LeakyReLU(negative_slope=0.2)
          (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (6): LeakyReLU(negative_slope=0.2)
        (7): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1))
        (8): LeakyReLU(negative_slope=0.2)
      )
      (linear): Linear(in_features=512, out_features=64, bias=True)
    )
  )
  (discriminator): DataParallel(
    (module): Discriminator(
      (conv_blocks): Sequential(
        (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ResBlk(
          (actv): LeakyReLU(negative_slope=0.2)
          (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv2): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv1x1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (2): ResBlk(
          (actv): LeakyReLU(negative_slope=0.2)
          (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv2): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv1x1): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (3): ResBlk(
          (actv): LeakyReLU(negative_slope=0.2)
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv2): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv1x1): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (4): ResBlk(
          (actv): LeakyReLU(negative_slope=0.2)
          (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (5): ResBlk(
          (actv): LeakyReLU(negative_slope=0.2)
          (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (6): LeakyReLU(negative_slope=0.2, inplace=True)
        (7): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1))
        (8): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (head): Conv2d(512, 26, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (mapping_network): DataParallel(
    (module): MappingNetwork(
      (mapping_network): MappingNetworkSingleStyle(
        (layers): Sequential(
          (0): Linear(in_features=1040, out_features=64, bias=True)
        )
      )
    )
  )
)
Training: |          | 0/? [00:00<?, ?it/s]Training:   0%|          | 0/194 [00:00<?, ?it/s]Epoch 0:   0%|          | 0/194 [00:00<?, ?it/s] Epoch 0:   1%|          | 1/194 [00:05<17:25,  0.18it/s]Epoch 0:   1%|          | 1/194 [00:05<17:26,  0.18it/s, v_num=kvjy]Epoch 0:   1%|          | 2/194 [00:05<09:27,  0.34it/s, v_num=kvjy]Epoch 0:   1%|          | 2/194 [00:05<09:27,  0.34it/s, v_num=kvjy]Epoch 0:   2%|▏         | 3/194 [00:06<06:47,  0.47it/s, v_num=kvjy]Epoch 0:   2%|▏         | 3/194 [00:06<06:47,  0.47it/s, v_num=kvjy]Epoch 0:   2%|▏         | 4/194 [00:06<05:27,  0.58it/s, v_num=kvjy]Epoch 0:   2%|▏         | 4/194 [00:06<05:27,  0.58it/s, v_num=kvjy]Epoch 0:   3%|▎         | 5/194 [00:07<04:39,  0.68it/s, v_num=kvjy]Epoch 0:   3%|▎         | 5/194 [00:07<04:39,  0.68it/s, v_num=kvjy]Epoch 0:   3%|▎         | 6/194 [00:07<04:07,  0.76it/s, v_num=kvjy]Epoch 0:   3%|▎         | 6/194 [00:07<04:07,  0.76it/s, v_num=kvjy]Epoch 0:   4%|▎         | 7/194 [00:08<03:44,  0.83it/s, v_num=kvjy]Epoch 0:   4%|▎         | 7/194 [00:08<03:44,  0.83it/s, v_num=kvjy]Epoch 0:   4%|▍         | 8/194 [00:08<03:26,  0.90it/s, v_num=kvjy]Epoch 0:   4%|▍         | 8/194 [00:08<03:26,  0.90it/s, v_num=kvjy]Epoch 0:   5%|▍         | 9/194 [00:09<03:12,  0.96it/s, v_num=kvjy]Epoch 0:   5%|▍         | 9/194 [00:09<03:12,  0.96it/s, v_num=kvjy]Epoch 0:   5%|▌         | 10/194 [00:09<03:01,  1.01it/s, v_num=kvjy]Epoch 0:   5%|▌         | 10/194 [00:09<03:01,  1.01it/s, v_num=kvjy]Epoch 0:   6%|▌         | 11/194 [00:10<02:52,  1.06it/s, v_num=kvjy]Epoch 0:   6%|▌         | 11/194 [00:10<02:52,  1.06it/s, v_num=kvjy]Epoch 0:   6%|▌         | 12/194 [00:10<02:44,  1.11it/s, v_num=kvjy]Epoch 0:   6%|▌         | 12/194 [00:10<02:44,  1.11it/s, v_num=kvjy]Epoch 0:   7%|▋         | 13/194 [00:11<02:37,  1.15it/s, v_num=kvjy]Epoch 0:   7%|▋         | 13/194 [00:11<02:38,  1.15it/s, v_num=kvjy]Epoch 0:   7%|▋         | 14/194 [00:11<02:32,  1.18it/s, v_num=kvjy]Epoch 0:   7%|▋         | 14/194 [00:11<02:32,  1.18it/s, v_num=kvjy]Epoch 0:   8%|▊         | 15/194 [00:12<02:27,  1.22it/s, v_num=kvjy]Epoch 0:   8%|▊         | 15/194 [00:12<02:27,  1.22it/s, v_num=kvjy]Epoch 0:   8%|▊         | 16/194 [00:12<02:22,  1.25it/s, v_num=kvjy]Epoch 0:   8%|▊         | 16/194 [00:12<02:22,  1.25it/s, v_num=kvjy]Epoch 0:   9%|▉         | 17/194 [00:13<02:18,  1.28it/s, v_num=kvjy]Epoch 0:   9%|▉         | 17/194 [00:13<02:18,  1.28it/s, v_num=kvjy]Epoch 0:   9%|▉         | 18/194 [00:13<02:14,  1.31it/s, v_num=kvjy]Epoch 0:   9%|▉         | 18/194 [00:13<02:14,  1.30it/s, v_num=kvjy]Epoch 0:  10%|▉         | 19/194 [00:14<02:11,  1.33it/s, v_num=kvjy]Epoch 0:  10%|▉         | 19/194 [00:14<02:11,  1.33it/s, v_num=kvjy]Epoch 0:  10%|█         | 20/194 [00:14<02:08,  1.35it/s, v_num=kvjy]Epoch 0:  10%|█         | 20/194 [00:14<02:08,  1.35it/s, v_num=kvjy]Epoch 0:  11%|█         | 21/194 [00:15<02:05,  1.38it/s, v_num=kvjy]Epoch 0:  11%|█         | 21/194 [00:15<02:05,  1.38it/s, v_num=kvjy]Epoch 0:  11%|█▏        | 22/194 [00:15<02:03,  1.40it/s, v_num=kvjy]Epoch 0:  11%|█▏        | 22/194 [00:15<02:03,  1.40it/s, v_num=kvjy]Epoch 0:  12%|█▏        | 23/194 [00:16<02:00,  1.42it/s, v_num=kvjy]Epoch 0:  12%|█▏        | 23/194 [00:16<02:00,  1.42it/s, v_num=kvjy]Epoch 0:  12%|█▏        | 24/194 [00:16<01:58,  1.43it/s, v_num=kvjy]Epoch 0:  12%|█▏        | 24/194 [00:16<01:58,  1.43it/s, v_num=kvjy]Epoch 0:  13%|█▎        | 25/194 [00:17<01:56,  1.45it/s, v_num=kvjy]Epoch 0:  13%|█▎        | 25/194 [00:17<01:56,  1.45it/s, v_num=kvjy]Epoch 0:  13%|█▎        | 26/194 [00:17<01:54,  1.47it/s, v_num=kvjy]Epoch 0:  13%|█▎        | 26/194 [00:17<01:54,  1.47it/s, v_num=kvjy]Epoch 0:  14%|█▍        | 27/194 [00:18<01:52,  1.48it/s, v_num=kvjy]Epoch 0:  14%|█▍        | 27/194 [00:18<01:52,  1.48it/s, v_num=kvjy]Epoch 0:  14%|█▍        | 28/194 [00:18<01:50,  1.50it/s, v_num=kvjy]Epoch 0:  14%|█▍        | 28/194 [00:18<01:50,  1.50it/s, v_num=kvjy]Epoch 0:  15%|█▍        | 29/194 [00:19<01:49,  1.51it/s, v_num=kvjy]Epoch 0:  15%|█▍        | 29/194 [00:19<01:49,  1.51it/s, v_num=kvjy]Epoch 0:  15%|█▌        | 30/194 [00:19<01:47,  1.53it/s, v_num=kvjy]Epoch 0:  15%|█▌        | 30/194 [00:19<01:47,  1.53it/s, v_num=kvjy]Epoch 0:  16%|█▌        | 31/194 [00:20<01:45,  1.54it/s, v_num=kvjy]Epoch 0:  16%|█▌        | 31/194 [00:20<01:45,  1.54it/s, v_num=kvjy]Epoch 0:  16%|█▋        | 32/194 [00:20<01:44,  1.55it/s, v_num=kvjy]Epoch 0:  16%|█▋        | 32/194 [00:20<01:44,  1.55it/s, v_num=kvjy]Epoch 0:  17%|█▋        | 33/194 [00:21<01:43,  1.56it/s, v_num=kvjy]Epoch 0:  17%|█▋        | 33/194 [00:21<01:43,  1.56it/s, v_num=kvjy]Epoch 0:  18%|█▊        | 34/194 [00:21<01:41,  1.57it/s, v_num=kvjy]Epoch 0:  18%|█▊        | 34/194 [00:21<01:41,  1.57it/s, v_num=kvjy]Epoch 0:  18%|█▊        | 35/194 [00:22<01:40,  1.58it/s, v_num=kvjy]Epoch 0:  18%|█▊        | 35/194 [00:22<01:40,  1.58it/s, v_num=kvjy]